{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell XPS\\\\Desktop\\\\react practise\\\\react-course-comfy-sloth-starter\\\\src\\\\context\\\\filter_context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useContext, useReducer } from 'react';\nimport reducer from '../reducers/filter_reducer';\nimport { LOAD_PRODUCTS, SET_GRIDVIEW, SET_LISTVIEW, UPDATE_SORT, SORT_PRODUCTS, UPDATE_FILTERS, FILTER_PRODUCTS, CLEAR_FILTERS } from '../actions';\nimport { useProductsContext } from './products_context'; //import Filters from '../components/Filters'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  filteredproducts: [],\n  allproducts: [],\n  gridview: false,\n  sort: 'price-lowest',\n  filters: {\n    text: '',\n    company: 'all',\n    category: 'all',\n    color: 'all',\n    minprice: 0,\n    maxprice: 0,\n    price: 0,\n    shipping: false\n  }\n};\nconst FilterContext = /*#__PURE__*/React.createContext();\nexport const FilterProvider = ({\n  children\n}) => {\n  _s();\n\n  const {\n    products\n  } = useProductsContext();\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    dispatch({\n      type: LOAD_PRODUCTS,\n      payload: products\n    });\n  }, [products]);\n\n  const setgridview = () => {\n    dispatch({\n      type: SET_GRIDVIEW\n    });\n  };\n\n  const setlistview = () => {\n    dispatch({\n      type: SET_LISTVIEW\n    });\n  };\n\n  const updatesort = e => {\n    //const name = e.target.name\n    const value = e.target.value;\n    dispatch({\n      type: UPDATE_SORT,\n      payload: value\n    }); //console.log(name,value)\n  };\n\n  useEffect(() => {\n    dispatch({\n      type: FILTER_PRODUCTS\n    });\n    dispatch({\n      type: SORT_PRODUCTS\n    });\n  }, [products, state.sort, state.filters]);\n\n  const updatefilters = e => {\n    let name = e.target.name;\n    let value = e.target.value;\n\n    if (name === 'category') {\n      value = e.target.textContent;\n    }\n\n    if (name === 'color') {\n      value = e.target.dataset.color;\n    }\n\n    if (name === 'shipping') {\n      value = e.target.checked;\n    } //console.log(name,value)\n\n\n    dispatch({\n      type: UPDATE_FILTERS,\n      payload: {\n        name,\n        value\n      }\n    });\n  };\n\n  const clearfilters = () => {\n    dispatch({\n      type: CLEAR_FILTERS\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(FilterContext.Provider, {\n    value: { ...state,\n      setlistview,\n      setgridview,\n      updatesort,\n      updatefilters,\n      clearfilters\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}; // make sure use\n\n_s(FilterProvider, \"uddh4dNHZdf+YUdlAheeMx6qpD8=\", false, function () {\n  return [useProductsContext];\n});\n\n_c = FilterProvider;\nexport const useFilterContext = () => {\n  _s2();\n\n  return useContext(FilterContext);\n};\n\n_s2(useFilterContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"FilterProvider\");","map":{"version":3,"sources":["C:/Users/Dell XPS/Desktop/react practise/react-course-comfy-sloth-starter/src/context/filter_context.js"],"names":["React","useEffect","useContext","useReducer","reducer","LOAD_PRODUCTS","SET_GRIDVIEW","SET_LISTVIEW","UPDATE_SORT","SORT_PRODUCTS","UPDATE_FILTERS","FILTER_PRODUCTS","CLEAR_FILTERS","useProductsContext","initialState","filteredproducts","allproducts","gridview","sort","filters","text","company","category","color","minprice","maxprice","price","shipping","FilterContext","createContext","FilterProvider","children","products","state","dispatch","type","payload","setgridview","setlistview","updatesort","e","value","target","updatefilters","name","textContent","dataset","checked","clearfilters","useFilterContext"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useReducer } from 'react'\r\nimport reducer from '../reducers/filter_reducer'\r\nimport {\r\n  LOAD_PRODUCTS,\r\n  SET_GRIDVIEW,\r\n  SET_LISTVIEW,\r\n  UPDATE_SORT,\r\n  SORT_PRODUCTS,\r\n  UPDATE_FILTERS,\r\n  FILTER_PRODUCTS,\r\n  CLEAR_FILTERS,\r\n} from '../actions'\r\nimport { useProductsContext } from './products_context'\r\n//import Filters from '../components/Filters'\r\n\r\nconst initialState = {\r\n  filteredproducts:[],\r\n  allproducts:[],\r\n  gridview:false,\r\n  sort:'price-lowest',\r\n  filters :{\r\n    text:'',\r\n    company:'all',\r\n    category:'all',\r\n    color:'all',\r\n    minprice:0,\r\n    maxprice:0,\r\n    price:0,\r\n    shipping:false\r\n  }\r\n\r\n}\r\n\r\nconst FilterContext = React.createContext()\r\n\r\nexport const FilterProvider = ({ children }) => {\r\n\r\n  const {products} = useProductsContext()\r\n\r\n  const [state,dispatch] = useReducer(reducer,initialState)\r\n\r\n    useEffect(()=>{\r\n    dispatch({\r\n      type:LOAD_PRODUCTS,\r\n      payload:products\r\n    })\r\n    },[products])\r\n\r\n    const setgridview =() =>{\r\n      dispatch({\r\n        type:SET_GRIDVIEW\r\n      })\r\n    }\r\n\r\n    const setlistview =() =>{\r\n      dispatch({\r\n        type:SET_LISTVIEW\r\n      })\r\n    }\r\n\r\n    const updatesort =(e) =>{\r\n\r\n      //const name = e.target.name\r\n      const value = e.target.value\r\n      dispatch({\r\n        type : UPDATE_SORT,\r\n        payload:value\r\n      })\r\n      //console.log(name,value)\r\n    }\r\n\r\n    useEffect(()=>{\r\n      dispatch({\r\n        type:FILTER_PRODUCTS\r\n      })\r\n      dispatch({\r\n        type:SORT_PRODUCTS\r\n      })\r\n    },[products,state.sort,state.filters])\r\n\r\n\r\n    const updatefilters = (e) =>{\r\n      let name = e.target.name\r\n      let value = e.target.value\r\n      if(name === 'category'){\r\n        value = e.target.textContent\r\n      }\r\n      if(name === 'color'){\r\n        value = e.target.dataset.color\r\n      }\r\n\r\n      if(name === 'shipping'){\r\n        value = e.target.checked\r\n      }\r\n      //console.log(name,value)\r\n      dispatch({\r\n        type:UPDATE_FILTERS,\r\n        payload:{name,value}\r\n      })\r\n    }\r\n\r\n    const clearfilters = () =>{\r\n      dispatch({\r\n        type:CLEAR_FILTERS\r\n      })\r\n    }\r\n\r\n  return (\r\n    <FilterContext.Provider value={{...state,\r\n    setlistview,\r\n    setgridview,\r\n    updatesort,\r\n    updatefilters,\r\n    clearfilters\r\n    }}>\r\n      {children}\r\n    </FilterContext.Provider>\r\n  )\r\n}\r\n// make sure use\r\nexport const useFilterContext = () => {\r\n  return useContext(FilterContext)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}